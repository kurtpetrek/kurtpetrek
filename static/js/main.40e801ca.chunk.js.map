{"version":3,"sources":["components/WavingHand/WavingHand.js","components/UnderConstruction/UnderConstruction.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","size","css","Hand","color","HandTop","props","Finger","Thumb","WavingHand","StylingContainer","fontColor","UnderConstruction","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g8EAGA,IAGMA,EAAUC,IAAOC,IAAV,0EAAGD,EACd,gBAAGE,EAAH,EAAGA,KAAH,OAAcC,YAAb,IAEUD,EACCA,MAIRE,EAAOJ,IAAOC,IAAV,uEAAGD,EACX,gBAAGE,EAAH,EAAGA,KAAMG,EAAT,EAASA,MAAT,OAAqBF,YAApB,IACeE,EACCH,EACDA,EACQA,EAAqBA,EAAqBA,EACvDA,MA6BPI,EAAUN,YAAOI,GAAV,0EAAGJ,EACd,SAACO,GAAD,OAAWJ,YAAV,QAKGK,EAASR,IAAOC,IAAV,yEAAGD,EACb,gBAAGE,EAAH,EAAGA,KAAMG,EAAT,EAASA,MAAT,OAAqBF,YAApB,IAEeD,EACCA,EAGDG,EACQH,EACTA,EAGEA,EAKAA,EAKAA,MAMbO,EAAQT,IAAOC,IAAV,wEAAGD,EACZ,gBAAGE,EAAH,EAAGA,KAAMG,EAAT,EAASA,MAAT,OAAqBF,YAApB,IACeD,EACCA,EACDG,EAGQH,EAAoBA,EACjCA,EACIA,MAwBFQ,EAlBI,SAACH,GAClB,IAAML,EAAOK,EAAML,MA/FJ,QAgGTG,EAAQE,EAAMF,OAjGD,QAmGnB,OACE,kBAACN,EAAD,CAASG,KAAMA,GACb,kBAACE,EAAD,CAAMC,MAAOA,EAAOH,KAAMA,GACxB,kBAACM,EAAD,CAAQH,MAAOA,EAAOH,KAAMA,IAC5B,kBAACM,EAAD,CAAQH,MAAOA,EAAOH,KAAMA,IAC5B,kBAACM,EAAD,CAAQH,MAAOA,EAAOH,KAAMA,IAC5B,kBAACM,EAAD,CAAQH,MAAOA,EAAOH,KAAMA,IAC5B,kBAACO,EAAD,CAAOJ,MAAOA,EAAOH,KAAMA,KAE7B,kBAACI,EAAD,CAASD,MAAOA,EAAOH,KAAMA,M,qdC5GnC,IAAMS,EAAmBX,IAAOC,IAAV,sFAAGD,EACvB,SAACO,GAAD,OAAWJ,YAAV,IACUI,EAAMK,WAAa,WAiCjBC,EAZW,SAACN,GACzB,OACE,kBAACI,EAAD,CAAkBC,UAAWL,EAAMK,WACjC,wDAC2B,6BAD3B,4BAIA,2C,+OC5BN,IAAMb,EAAUC,IAAOC,IAAV,+DAAGD,EACd,SAACO,GAAD,OAAWJ,YAAV,QAmBYW,MATf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYT,MAAM,QAAQH,KAAK,UAC/B,kBAAC,EAAD,CAAmBU,UAAU,YCRfG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.40e801ca.chunk.js","sourcesContent":["import React from \"react\";\nimport styled, { css } from \"styled-components/macro\";\n\nconst defaultColor = \"white\";\nconst defaultSize = `300px`;\n\nconst Wrapper = styled.div(\n  ({ size }) => css`\n    position: relative;\n    width: ${size};\n    height: ${size};\n  `\n);\n\nconst Hand = styled.div(\n  ({ size, color }) => css`\n    background: ${color};\n    height: calc(${size} * 0.4);\n    width: calc(${size} * 0.4);\n    border-radius: calc(${size} * 0.14) calc(${size} * 0.14) calc(${size} * 0.1)\n      calc(${size} * 0.1);\n    position: absolute;\n    bottom: 15%;\n    left: 30%;\n    animation: wave-hi 3s infinite;\n    box-shadow: 3px 10px 5px 0px rgba(0, 0, 0, 0.3);\n\n    @keyframes wave-hi {\n      0%,\n      100% {\n        transform: rotate(30deg) rotate3d(0, 1, 0, 20deg) translate(5%, -10%);\n        box-shadow: 3px 5px 5px 0px rgba(0, 0, 0, 0.2);\n      }\n      25% {\n        transform: rotate(-20deg) rotate3d(0, 1, 0, -20deg) translate(-5%, 0);\n        box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.2);\n      }\n      50% {\n        transform: rotate(20deg) rotate3d(0, 1, 0, 20deg) translate(5%, -10%);\n        box-shadow: 3px 5px 5px 0px rgba(0, 0, 0, 0.2);\n      }\n      75% {\n        transform: rotate(-30deg) rotate3d(0, 1, 0, -20deg) translate(-5%, 0%);\n        box-shadow: 5px 5px 5px 0px rgba(0, 0, 0, 0.2);\n      }\n    }\n  `\n);\n\nconst HandTop = styled(Hand)(\n  (props) => css`\n    box-shadow: none;\n  `\n);\n\nconst Finger = styled.div(\n  ({ size, color }) => css`\n    box-shadow: 0px 6px 3px 6px rgba(0, 0, 0, 0.3);\n    width: calc(${size} * 0.084);\n    height: calc(${size} * 0.4);\n    position: absolute;\n    bottom: 68%;\n    background: ${color};\n    border-radius: calc(${size} * 0.04);\n    left: calc(${size} * 0.005);\n\n    &:nth-child(2) {\n      left: calc(${size} * 0.106);\n      bottom: 86%;\n    }\n\n    &:nth-child(3) {\n      left: calc(${size} * 0.21);\n      bottom: 76%;\n    }\n\n    &:nth-child(4) {\n      left: calc(${size} * 0.316);\n      bottom: 54%;\n    }\n  `\n);\n\nconst Thumb = styled.div(\n  ({ size, color }) => css`\n    width: calc(${size} * 0.12);\n    height: calc(${size} * 0.37);\n    background: ${color};\n    position: absolute;\n    transform: skew(30deg);\n    border-radius: calc(${size} * 0.1) calc(${size} * 0.04) 0\n      calc(${size} * 0.1);\n    left: calc(${size} * -0.08);\n    bottom: 0vmin;\n    box-shadow: 0px 2px 5px 3px rgba(0, 0, 0, 0.2);\n  `\n);\n\nconst WavingHand = (props) => {\n  const size = props.size || defaultSize;\n  const color = props.color || defaultColor;\n\n  return (\n    <Wrapper size={size}>\n      <Hand color={color} size={size}>\n        <Finger color={color} size={size} />\n        <Finger color={color} size={size} />\n        <Finger color={color} size={size} />\n        <Finger color={color} size={size} />\n        <Thumb color={color} size={size} />\n      </Hand>\n      <HandTop color={color} size={size} />\n    </Wrapper>\n  );\n};\n\nexport default WavingHand;\n","import React from \"react\";\nimport styled, { css } from \"styled-components/macro\";\n\nconst StylingContainer = styled.div(\n  (props) => css`\n    color: ${props.fontColor || \"#000\"};\n    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto,\n      Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\",\n      \"Segoe UI Symbol\";\n    text-align: center;\n    padding: 16px 32px;\n\n    @media (max-width: 500px) {\n      font-size: 14px;\n    }\n\n    h1 {\n      font-size: 1.8em;\n    }\n\n    h2 {\n      font-size: 1.5em;\n    }\n  `\n);\n\nconst UnderConstruction = (props) => {\n  return (\n    <StylingContainer fontColor={props.fontColor}>\n      <h1>\n        Moving hosting to Github <br />\n        need to rebuild in React\n      </h1>\n      <h2>Back soon</h2>\n    </StylingContainer>\n  );\n};\n\nexport default UnderConstruction;\n","import React from \"react\";\nimport styled, { css } from \"styled-components/macro\";\nimport WavingHand from \"./components/WavingHand/WavingHand\";\nimport UnderConstruction from \"./components/UnderConstruction/UnderConstruction\";\n\nconst Wrapper = styled.div(\n  (props) => css`\n    min-height: 100vh;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    background: rgba(0, 0, 0, 0.8);\n  `\n);\n\nfunction App() {\n  return (\n    <Wrapper>\n      <WavingHand color=\"white\" size=\"230px\" />\n      <UnderConstruction fontColor=\"white\" />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}